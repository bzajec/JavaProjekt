/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.models.Actor;
import hr.algebra.models.ActorTransferable;
import hr.algebra.models.Director;
import hr.algebra.models.DirectorTransferable;
import hr.algebra.models.Film;
import hr.algebra.models.Genre;
import hr.algebra.models.TableModelFilm;
import hr.algebra.models.User;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.Color;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.xml.stream.XMLStreamException;

/**
 *
 * @author Bruno
 */
public class EditFilmPanel extends javax.swing.JPanel {

    private Film currentFilm;
    private Repository repository;
    private List<Actor> allActors;
    private List<Actor> actorsInFilm;
    private List<Director> directorsInFilm;
    private List<Genre> allGenres;
    private List<Director> allDirectors;
    private TableModelFilm tableModelFilm;
    private List<Film> allFilmsCurrentlyInDatabase;
    private DefaultListModel<Director> selectedDirectorsListModel = new DefaultListModel<>();
    private List<Film> allParsedFilms;
    
    private DefaultListModel<Director> directorsModel = new DefaultListModel<>();
    private DefaultListModel<Actor> actorsModel = new DefaultListModel<>();
    private DefaultListModel<Genre> genresModel = new DefaultListModel<>();
    private DefaultListModel<Actor> selectedActListModel = new DefaultListModel<>();
    
    private static final String DIR = "assets";
    private static final String EXT = ".jpg";
    
    User currentUser;
    /**
     * Creates new form EditFilmPanel
     */
    public EditFilmPanel() throws Exception{
        
       initComponents();
       initRepository();
       init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblFilms = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tbTitle = new javax.swing.JTextField();
        tbGenre = new javax.swing.JTextField();
        tbDuration = new javax.swing.JTextField();
        tbPublishDate = new javax.swing.JTextField();
        tfPicturePath = new javax.swing.JTextField();
        btnPath = new javax.swing.JButton();
        lblPicture = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        liActors = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        liGenres = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        liDirectors = new javax.swing.JList<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        liActorsInFilm = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        liDirectorsInFilm = new javax.swing.JList<>();
        btnRefresh = new javax.swing.JButton();
        btnAddFilm = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdateFilm = new javax.swing.JButton();

        tblFilms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblFilms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFilmsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblFilms);

        jLabel1.setText("Genre:");

        jLabel2.setText("Title:");

        jLabel3.setText("Publish date:");

        jLabel4.setText("Duration:");

        jLabel5.setText("Picture path:");

        btnPath.setText("Path");
        btnPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPathActionPerformed(evt);
            }
        });

        jLabel6.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        jLabel7.setText("Actors:");

        jScrollPane3.setViewportView(liActors);

        jLabel8.setText("Genres:");

        jScrollPane4.setViewportView(liGenres);

        jLabel9.setText("Directors:");

        jScrollPane5.setViewportView(liDirectors);

        jLabel10.setText("Actors in film:");

        jLabel11.setText("Directors of film:");

        jScrollPane6.setViewportView(liActorsInFilm);

        jScrollPane7.setViewportView(liDirectorsInFilm);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnAddFilm.setText("Add film");
        btnAddFilm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFilmActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdateFilm.setText("Update film");
        btnUpdateFilm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFilmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3)
                                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tbGenre))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tbPublishDate))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tbDuration))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(tbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnPath, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUpdateFilm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddFilm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane7)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane2))
                .addGap(82, 82, 82))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbPublishDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(24, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefresh)
                            .addComponent(btnAddFilm)
                            .addComponent(btnDelete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdateFilm)
                        .addGap(23, 23, 23))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPathActionPerformed
        // TODO add your handling code here:
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file.isPresent()) {
            File image = file.get();
            
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyMMddHHmmssZ");
            String pictureName = sdf.format(cal.getTime()) + EXT;
            String localPicturePath = DIR + File.separator + pictureName;
            
            try {
                FileUtils.copy(image.getAbsolutePath(), localPicturePath);
                tfPicturePath.setText(localPicturePath);
                setIcon(lblPicture,file.get());
            } catch (IOException ex) {
                Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        
    }//GEN-LAST:event_btnPathActionPerformed

    private void tblFilmsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFilmsMouseClicked
        try {
            // TODO add your handling code here:
            showFilm();
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblFilmsMouseClicked

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        init();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddFilmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFilmActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnAddFilmActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (MessageUtils.showConfirmDialog(
                "Delete article",
                "Do you really want to delete this movie?") == JOptionPane.YES_OPTION) {
            try {
            int selectedRow = tblFilms.getSelectedRow();
            int rowIndex = tblFilms.convertRowIndexToModel(selectedRow);
            int selectedMovieId = (int) tableModelFilm.getValueAt(rowIndex, 0);           
            
            repository.uspDeleteFilm(selectedMovieId);
                
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete article!");
            }
        }
        
        MessageUtils.showInformationMessage("Info", "Movie deleted");
        clearForm();     
        try {
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateFilmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateFilmActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnUpdateFilmActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFilm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPath;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdateFilm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblPicture;
    private javax.swing.JList<Actor> liActors;
    private javax.swing.JList<Actor> liActorsInFilm;
    private javax.swing.JList<Director> liDirectors;
    private javax.swing.JList<Director> liDirectorsInFilm;
    private javax.swing.JList<Genre> liGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTextField tbDuration;
    private javax.swing.JTextField tbGenre;
    private javax.swing.JTextField tbPublishDate;
    private javax.swing.JTextField tbTitle;
    private javax.swing.JTable tblFilms;
    private javax.swing.JTextField tfPicturePath;
    // End of variables declaration//GEN-END:variables

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void init() {
        
        try {
            if (repository.uspGetAllFilms().size() < 1) {
            }
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        
        try {
            initAllFilmsCurrentlyInDatabase();
            initTable();
            initAllActors();
            initAllGenres();
            initAllDirectors();
            initDragDrop();

        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);

        }
    }

    private void initTable() throws Exception, XMLStreamException {
        Director d = new Director();

        tblFilms.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblFilms.setAutoCreateRowSorter(true);
        tblFilms.setRowHeight(25);
        tableModelFilm = new TableModelFilm(allFilmsCurrentlyInDatabase);
        tblFilms.setModel(tableModelFilm);
        tblFilms.setSelectionBackground(Color.BLACK);
        tblFilms.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableModelFilm.setFilmsTableModelColumnWidthNormalView(tblFilms);

        SwingUtilities.updateComponentTreeUI(tblFilms);
    }
    

    private void initAllFilmsCurrentlyInDatabase() {
        try {
            List<Film> films = repository.uspGetAllFilms();
            for (int i = 0; i < films.size(); i++) {
                Film myfilm = films.get(i);
                List<Actor> actorsForThisFilm = repository.uspGetAllActorsForFilm(myfilm.getId());
                List<Genre> genresForThisFilm = repository.uspGetAllGenresForFilm(myfilm.getId());
                //List<Director> fdForThisFilm = repository.uspSelectDirectorsFilm(myfilm.getId());
                myfilm.setActors(actorsForThisFilm);
                myfilm.setGenres(genresForThisFilm);
                //myfilm.setDirectors(fdForThisFilm);
                
            }

            allFilmsCurrentlyInDatabase = films;
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initForm() {
        tbTitle.setText(currentFilm.getTitle());
        //tbGenre.setText(String.valueOf(currentFilm.getGenre()));
        tbDuration.setText(String.valueOf(currentFilm.getRunningTime()));
        String publishDate = currentFilm.getPublishedDate().toString();
        publishDate= publishDate.replaceAll("-", "");
        tbPublishDate.setText(publishDate);
        taDescription.setText(currentFilm.getDescription());//liActorsInFilm.setModel(currentFilm.getActors());
        if (currentFilm.getPicturePath() != null && Files.exists(Paths.get(currentFilm.getPicturePath()))) {
            tfPicturePath.setText(currentFilm.getPicturePath());
            try {
                setIcon(lblPicture, new File(currentFilm.getPicturePath()));
            } catch (Exception e) {
                System.out.println("No picture!");
            }
        } else {
            tfPicturePath.setText("");
        }
        
    }

    private void initAllActors() {
         try {
            allActors = repository.uspGetAllActors();
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        allActors.forEach(a -> actorsModel.addElement(a));
        liActors.setModel(actorsModel);
    }

    private void initAllGenres() {
        try {
            allGenres= repository.uspSelectAllGenres();
            
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
         allGenres.forEach(g -> genresModel.addElement(g));
        liGenres.setModel(genresModel);
    }
    
    private void initAllDirectors() {
        try {
            allDirectors = repository.uspSelectAllDirectors();
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        allDirectors.forEach(fd -> directorsModel.addElement(fd));
        liDirectors.setModel(directorsModel);
    }
    
    private void clearForm() {
        tbTitle.setText("");
        tbGenre.setText("");
        tbDuration.setText("");
        tfPicturePath.setText("");
        tbPublishDate.setText("");
        taDescription.setText("");
        liActorsInFilm.removeAll();
    }

    private void showFilm() throws Exception {
        clearForm();
        initActorsInFilm();
        initDirectorsInFilm();
        
        int selectedRow = tblFilms.getSelectedRow();
        int rowIndex = tblFilms.convertRowIndexToModel(selectedRow);
        int selectedFilmId = (int) tableModelFilm.getValueAt(rowIndex, 0);
        try {
            Optional<Film> optFilm = repository.uspSelectMovie(selectedFilmId);
            if (optFilm.isPresent()) {
                currentFilm = optFilm.get();
                initForm();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
        
    }

    private void setIcon(JLabel lblPicture, File file) {
        try {
            lblPicture.setIcon(IconUtils.createIcon(file.getAbsolutePath(), lblPicture.getWidth(), lblPicture.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }
    
     private void initActorsInFilm() throws Exception {
        clearForm();
        int selectedRow = tblFilms.getSelectedRow();
        int rowIndex = tblFilms.convertRowIndexToModel(selectedRow);
        int selectedFilmId = (int) tableModelFilm.getValueAt(rowIndex, 0);
        try {
            Optional<Film> optFilm = repository.uspSelectMovie(selectedFilmId);
            if (optFilm.isPresent()) {
                currentFilm = optFilm.get();
                initForm();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
        selectedActListModel.clear();
        liActorsInFilm.setModel(selectedActListModel);
        actorsInFilm = repository.uspSelectActorsInFilm(currentFilm);
        selectedActListModel.clear();
        actorsInFilm.forEach(actor -> selectedActListModel.addElement(actor));
        liActorsInFilm.setModel(selectedActListModel);
        
    }
     
     private void initDirectorsInFilm() throws Exception {
        clearForm();
        int selectedRow = tblFilms.getSelectedRow();
        int rowIndex = tblFilms.convertRowIndexToModel(selectedRow);
        int selectedFilmId = (int) tableModelFilm.getValueAt(rowIndex, 0);
        try {
            Optional<Film> optFilm = repository.uspSelectMovie(selectedFilmId);
            if (optFilm.isPresent()) {
                currentFilm = optFilm.get();
                initForm();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
        selectedDirectorsListModel.clear();
        liDirectorsInFilm.setModel(selectedDirectorsListModel);
        directorsInFilm = repository.uspSelectDirectorsInFilm(currentFilm);
        List<Director> listaBezDuplikata = directorsInFilm.stream().distinct().collect(Collectors.toList());
        selectedDirectorsListModel.clear();
        directorsInFilm.forEach(director -> selectedDirectorsListModel.addElement(director));
        liDirectorsInFilm.setModel(selectedDirectorsListModel);
    }

    private void initDragDrop() {
        liActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        liActors.setDragEnabled(true);
        liActors.setTransferHandler(new ActorExportTransferHandler());
        liActorsInFilm.setDropMode(DropMode.ON);
        liActorsInFilm.setTransferHandler(new ActorImportTransferHandler());
        liDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        liDirectors.setDragEnabled(true);
        liDirectors.setTransferHandler(new DirectorExportTransferHandler());
        liDirectorsInFilm.setDropMode(DropMode.ON);
        liDirectorsInFilm.setTransferHandler(new DirectorImportTransferHandler());
    }
    
    private class ActorExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(liActors.getSelectedValue());
        }
    }

    private class ActorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor add = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (allActors.add(add)) {
                    if (MessageUtils.showConfirmDialog("Add actor", "Are you sure") == JOptionPane.YES_OPTION) {
                        repository.uspCreateNewActorFilm(currentFilm, add);
                        initActorsInMovie(currentFilm);
                        return true;
                    } else {
                        return false;
                    }

                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }

    private class DirectorExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new DirectorTransferable(liDirectors.getSelectedValue());
        }
    }

    private class DirectorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DirectorTransferable.DIRECTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Director add = (Director) transferable.getTransferData(DirectorTransferable.DIRECTOR_FLAVOR);
                if (allDirectors.add(add)) {
                    if (MessageUtils.showConfirmDialog("Add director", "Are you sure") == JOptionPane.YES_OPTION) {
                        repository.uspCreateNewDirectorFilm(currentFilm, add);
                        initDirectorsInMovie(currentFilm);
                        return true;
                    } else {
                        return false;
                    }
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

        private void initDirectorsInMovie(Film currentFilm) throws Exception {
            clearForm();
        int selectedRow = tblFilms.getSelectedRow();
        int rowIndex = tblFilms.convertRowIndexToModel(selectedRow);
        int selectedFilmId = (int) tableModelFilm.getValueAt(rowIndex, 0);
        try {
            Optional<Film> optFilm = repository.uspSelectMovie(selectedFilmId);
            if (optFilm.isPresent()) {
                currentFilm = optFilm.get();
                initForm();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
        selectedDirectorsListModel.clear();
        liDirectorsInFilm.setModel(selectedDirectorsListModel);
        directorsInFilm = repository.uspSelectDirectorsInFilm(currentFilm);
        selectedDirectorsListModel.clear();
        directorsInFilm.forEach(director -> selectedDirectorsListModel.addElement(director));
        liDirectorsInFilm.setModel(selectedDirectorsListModel);
        }
    }
    private void initActorsInMovie(Film film) throws Exception {
        clearForm();
        int selectedRow = tblFilms.getSelectedRow();
        int rowIndex = tblFilms.convertRowIndexToModel(selectedRow);
        int selectedFilmId = (int) tableModelFilm.getValueAt(rowIndex, 0);
        try {
            Optional<Film> optFilm = repository.uspSelectMovie(selectedFilmId);
            if (optFilm.isPresent()) {
                currentFilm = optFilm.get();
                initForm();
            }
        } catch (Exception ex) {
            Logger.getLogger(EditFilmPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie!");
        }
        selectedActListModel.clear();
        liActorsInFilm.setModel(selectedActListModel);
        actorsInFilm = repository.uspSelectActorsInFilm(currentFilm);
        selectedActListModel.clear();
        actorsInFilm.forEach(actor -> selectedActListModel.addElement(actor));
        liActorsInFilm.setModel(selectedActListModel);
    }
}

    

    

    

